# Directory assitance
# Sites directory
function st {
  WEBROOT="$HOME/Sites/"
  cd "$WEBROOT$1"
}

# Simple calculator
function calc {
  local result=""
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
  #                       └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'      `# add "0" for cases like ".5"` \
      -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
      -e 's/0*$//;s/\.$//'   # remove trailing zeros
  else
    printf "$result"
  fi
  printf "\n"
}

# Create a new directory and enter it
function mkd {
  mkdir -p "$@" && cd "$_"
}

# Change working directory to the top-most Finder window location
function cdf { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz {
  local tmpFile="${@%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null  # GNU `stat`
  )

  local cmd=""
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar using \`${cmd}\`…"
  "${cmd}" -v "${tmpFile}" || return 1
  [ -f "${tmpFile}" ] && rm "${tmpFile}"
  echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs {
  if du -b /dev/null &>/dev/null; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from a file
function dataurl {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    if [[ $mime_type = "text/plain" ]]; then
      extension="${1##*.}"
      [[ $extension = "svg" ]] && mime_type="image/svg+xml";
    fi
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
function gitio {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`"
    return 1
  fi
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start an HTTP server from a directory, optionally specifying the port
function server {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver {
  local port="${1:-4000}"
  local ip=$(ipconfig getifaddr en1)
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz {
  in=$(cat "${1:-/dev/stdin}")
  local gzipsize="$(echo -n "$in" | gzip - -fc | wc -c)"
  local origsize="$(echo -n "$in" | wc -c)"
  local ratio="$(echo "$gzipsize * 100/ $origsize" | bc -l)"
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  else # pipe
    python -mjson.tool | pygmentize -l javascript
  fi
}

# All the dig info
function digga {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Get a character’s Unicode code point
function codepoint {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "Testing ${domain}…"
  echo # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_header, no_serial, no_version, \
      no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
      echo "Common Name:"
      echo # newline
      echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
      echo # newline
      echo "Subject Alternative Name(s):"
      echo # newline
      echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
        | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
      return 0
  else
    echo "ERROR: Certificate not found."
    return 1
  fi
}

# Add note to Notes.app
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note {
  local title
  local body
  if [ -t 0 ]; then
    title="$1"
    body="$2"
  else
    title=$(cat)
  fi
  osascript >/dev/null <<EOF
tell application "Notes"
  tell account "iCloud"
    tell folder "Notes"
      make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
    end tell
  end tell
end tell
EOF
}

# Add reminder to Reminders.app
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind {
  local text
  if [ -t 0 ]; then
    text="$1" # argument
  else
    text=$(cat) # pipe
  fi
  osascript >/dev/null <<EOF
tell application "Reminders"
  tell the default list
    make new reminder with properties {name:"$text"}
  end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine {
  for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
    xattr -r -d "$attribute" "$@"
  done
}

# Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage: `gi contrib-watch contrib-uglify zopfli`
function gi {
  local IFS=,
  eval npm install --save-dev grunt-{"$*"}
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s {
  if [ $# -eq 0 ]; then
    subl .
  else
    subl "$@"
  fi
}

# `a` with no arguments opens the current directory in Atom, otherwise
# opens the given location
function a {
  if [ $# -eq 0 ]; then
    atom .
  else
    atom "$@"
  fi
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v {
  if [ $# -eq 0 ]; then
    vim .
  else
    vim "$@"
  fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# `np` with an optional argument `patch`/`minor`/`major`/`<version>`
# defaults to `patch`
function np {
  git pull --rebase && \
  npm install && \
  npm test && \
  npm version ${1:=patch} && \
  npm publish && \
  git push origin master && \
  git push origin master --tags
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Check isup.me for website status
function isup {
  for theSite; do
    if [[ $(curl -sL http://www.isup.me/$1 | grep "It's just you") ]]; then
      echo "$theSite up";
    else
      echo "$theSite down";
    fi
  done
}

# Decode base64
function debase64 {
  echo "$1" | base64 -D ; echo
}

# Encode URI
function encodeuri {
  node -e "console.log(encodeURI(\"$1\"))"
}

# Get forcast
function forecast {
  whereami=$(whereami)
  latitude=$(echo "$whereami" | awk '$1 ~ /^Latitude/ { print $2 }')
  longitude=$(echo "$whereami" | awk '$1 ~ /^Longitude/ { print $2 }')
  json=$(curl -s "https://api.forecast.io/forecast/${FORECAST_API_KEY}/${latitude},${longitude}")
  summary=$(echo "$json" | jsawk 'return this.minutely.summary' 2> /dev/null)
  temp=$(echo "$json" | jsawk 'return this.currently.apparentTemperature' 2> /dev/null)
  printf 'Feels like %0.0f\xC2\xB0F. %s\n' "$temp" "$summary"
}

# Toggle single application mode
# When single application mode is enabled, clicking a Dock icon will activate
# the selected application and hide all other applicatios
# Multiple Apps may be activated simultaneously using any method other than
# clicking the Dock icon
function tsam {
  current=$(defaults read com.apple.dock single-app 2> /dev/null)
  inverse=$([[ $current && $current == '1' ]] && echo false || echo true)
  defaults write com.apple.dock single-app -bool "$inverse" && killall Dock
}

# Frames an image uniformly on all sides
function frame {
  size="$1"
  shift 1
  for file in "$@"; do
    color="$(identify -format "%[pixel: u.p{0,0}]" "$file")"
    mogrify -mattecolor "${color}" -trim +repage -frame "$size" "$file"
  done;
}

# Resolved server type (after following redirects)
function server {
  curl -sLI "$1" | awk 'BEGIN { FS=": " } /Server/ {s=$2}END{print s}'
}

# Covert a symlink to a regular file
function removelink {
  if [ -L "$1" ]; then
    # Must store target path before link is removed
    target="$(dirname "$1")/$(readlink "$1")"
    rm "$1" && cp -Rf "$target" "$1"
  fi
}

# Beep
function beep {
  # List sounds with :
  # ls -1 /System/Library/Sounds/ | sed 's/\..*//g'
  sound="/System/Library/Sounds/$1.aiff"
  if [ -n "$1" ] && [ -f "$sound" ]; then
    afplay "$sound"
  else
    osascript -e "beep"
  fi
}

# Get global DNS using `dnsyo`
function gdns {
  dnsyo -q ALL -c US -s $1 | \
    awk '$2 == "SUCCESS" {sum=$3}; $1 == "RESULT" {printf "%.2f%% %s\n", $2/sum*100, $3}' |\
    column -t | sort
}

##
# Control Notification Center's Do Not Disturb setting
#
# $1 ["on"]
#  "status" Do Not Disturb status
#  "on"     Enable Do Not Disturb
#  "off"    Disable Do Not Disturb
##
# function dnd {
#   opt=${1:-on}
#   osascript <<EOD
#     set opt to "$opt"
#     tell application "System Events" to tell application process "SystemUIServer"
#       try
#         set dnd_status to (exists menu bar item "Notification Center, Do Not Disturb enabled" of menu bar 1)
#         if opt is "status" then
#           set output to dnd_status
#         else if {"on", "off"} contains opt then
#           key down option
#           if   (opt is "off" and dnd_status is true ) ¬
#             or (opt is "on"  and dnd_status is false) then
#             # name of menu bar item 1 of menu bar 1 starts with "Notification Center"
#             click (the first menu bar item of menu bar 1 whose name starts with "Notification Center")
#           end if
#           key up option
#         end if
#       on error
#         key up option
#       end try
#     end tell
# EOD
# }

##
# New QuickTime screen recording
# Note: Assistive access must be enabled for "automated start" to work
##
function rec {
  # Enable Do Not Distrub before recording
  dnd on

  # Activate new screen recording
  osascript <<'ASCRIPT' >/dev/null
    tell application "QuickTime Player"
      activate new screen recording
      -- Hit Spacebar
      tell application "System Events" to key code 49
      -- Alternative
      -- to tell window "Screen Recording" to click button 1
    end tell
ASCRIPT

  # Click-drag to match bounds of application window
  process="$1"
  if [ -n "$process" ]; then
    read x y dx dy <<<$(osascript <<ASCRIPT
      -- Bring target application to front
      tell application "${process}" to activate
      -- Bring QuickTime to front
      tell application "QuickTime Player" to activate
      -- Get window bounds
      set AppleScript's text item delimiters to " "
      tell application "System Events" to tell process "${process}"
        set window_bounds to {position, size} of first window
        get window_bounds as text
      end tell
ASCRIPT
    )

    offset="$2"
    clickdrag -x   $((x-offset)) -y   $((y-offset)) \
              -dx $((dx+2*offset)) -dy $((dy+2*offset))
  fi
}

# Set macOS wallpaper
# Examples:
#   wallpaper set "/Library/Desktop Pictures/Solid Colors/Solid White.png"
#   wallpaper set "#fff"
#   wallpaper save
#   wallpaper restore
wallpaper() {
  opt="$1"

  if [[ $opt == "set" ]]; then
    # Set
    wallpaper="$2"
    # TODO: Accept hax value as args, and create image if it does not exist
    if [[ ${wallpaper//\#} =~ ^([[:xdigit:]]{3}){1,2}$ ]]; then
      wallpaper="/Library/Desktop Pictures/Solid Colors/${wallpaper//\#}.png"
    fi
    osascript -e 'tell application "Finder" to set desktop picture to POSIX file "'$wallpaper'"'
  elif [[ $opt == "save" ]]; then
    # Save
    defaults write com.apple.desktop BackgroundImage -string \
      "$(osascript -e 'tell application "Finder" to get POSIX path of (desktop picture as alias)')"
  elif [[ $opt == "restore" ]]; then
    # Restore
    wallpaper=$(defaults read com.apple.desktop BackgroundImage)
    osascript -e 'tell application "Finder" to set desktop picture to POSIX file "'$wallpaper'"'
  fi
}

# Lookup IP of hostname
function ip {
  [ -n "$*" ] && dig +short "$1" | tail -1 \
              || dig +short myip.opendns.com @resolver1.opendns.com
}

# Reload ZSH configurations
function reload {
  # Get current shell
  # ps -p $$ | awk '$1 == PP {print $4}' PP=$$
  zshrc="$HOME/.zshrc" && [ -e "$zshrc" ] && . "$zshrc"
}

# Convert seconds to D:H:M:S
function convertsecs {
 ((d=${1}/86400))
 ((h=(${1}%86400)/3600))
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 printf "%d:%02d:%02d:%02d\n" $d $h $m $s
}

# Markdown quote - end heredoc with "MDQUOTE"
function mdquote {
  echo $@ | fold -sw 78 | awk '{print "> " $0}'
}

# Convert Markdown tables to CSV
function md2csv {
  in="$1"
  out="${in%%.*}.csv"
  sed -e 's/^[[:space:]|]*//g' \
      -e 's/[[:space:]|]*$//g' \
      -e '/^[[:space:]|:-]*$/d' \
      -e 's/[[:space:]]*\|[[:space:]]*/,/g' "$in" > "$out"
}

# Print bundle identifier of application
function bundleid {
  # Accept multiple forms of input
  osascript -e "id of app \"$*\"" 2>/dev/null || /usr/libexec/PlistBuddy -c 'Print CFBundleIdentifier' "$1/Contents/Info.plist"
}

# Get compressed webpage sizes
function httpgz {
  none=$(curl -sL "$1" | wc -c)
  gzip=$(curl -sLH "Accept-Encoding: gzip" "$1" | wc -c)
  br=$(curl -sLH "Accept-Encoding: br" "$1" | wc -c)

  cat <<- EOF
  none: $none
  gzip: $gzip $((100*$gzip/$none))%
  br:   $br $((100*$br/$none))%
EOF
}

################################################################################
# SSH
################################################################################

# Copy SSH key to pasteboard
function ssh-config {
  open -t ~/.ssh/config
}

# Get resolved SSH hostname
function ssh-hostname {
  ssh -G "$1" | awk '$1 ~ /^hostname/ {print $2}'
}

# Add SSH key to server
function ssh-copy-id {
  ssh-add -l && (cat $(ssh-add -l | awk '{print $3 ".pub"}') | ssh "$1" 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys')
}

# Copy SSH key to pasteboard
function ssh-keycopy {
  ssh-add -l && (cat $(ssh-add -l | awk '{print $3 ".pub"}') | pbcopy)
}

# Test SSH public key authentication
function ssh-keytest {
  ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
      -o PreferredAuthentications=publickey -q "$1" exit && \
      echo 'Connected' || \
      echo 'Failed'
}

# Force SSH to use password authentication
function ssh-password {
  ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no $@
}
